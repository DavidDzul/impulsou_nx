# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  enrollment: String!
  phone: String
  active: Boolean!
  campus: CampusEnum!
  generationId: Float
  role: RoleUser!
  createdAt: String!
  updatedAt: String!
  generation: Generation
  attendances: Attendance
  photos: [Photo!]
  constancy: [Constancy!]
  attendanceMap(date: String!): [Attendance!]
  images: [Photo!]!
}

enum CampusEnum {
  MERIDA
  VALLADOLID
  TIZIMIN
  OXKUTZCAB
}

enum RoleUser {
  STUDENT
  GRADUATE
}

type Admin {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  active: Boolean!
  role: RoleEnum
  campus: CampusEnum!
  createdAt: String!
  updatedAt: String!
}

enum RoleEnum {
  ADMIN
  PSICOL
}

type Generation {
  id: Int!
  generation: Int!
  campus: CampusEnum!
  inProgress: Boolean!
  createdAt: String!
  updatedAt: String!
  users: [User!]!
}

type Attendance {
  id: Int!
  userId: Int!
  checkIn: String!
  checkOut: String
  delay: Boolean!
  justifiedDelay: Boolean!
  justifiedAbsence: Boolean!
  reason: ReasonEmun
  descripcion: String
  createdAt: String!
  updatedAt: String!
  user: User!
  userAttendance: User
}

enum ReasonEmun {
  ACADEMIC
  PERSONAL
  OTHER
}

type Photo {
  id: Int!
  userId: Int!
  url: String!
  admin: Boolean!
  createdAt: String!
}

type Constancy {
  id: Int!
  name: String!
  userId: Int!
  url: String!
  fileId: String!
  startDate: String!
  endDate: String!
  createdAt: String!
}

type Token {
  token: String!
}

type SuccessMessage {
  message: String!
}

type Query {
  findAllGenerations: [Generation!]!
  findAllUsers: [User!]!
  findOneUser(id: Int!): User!
  profile: Admin!
}

type Mutation {
  createConstancy(userId: Int!, recordFile: Upload!, startDate: String!, endDate: String!): Constancy!
  createPhoto(userId: Int!, photo: Upload!): Photo!
  removePhoto(id: Int, userId: Int!): SuccessMessage!
  generateAttendance(attendanceInput: AttendanceInput!): User!
  createAttendance(createAttendanceInput: CreateAttendanceInput!): Attendance!
  updateAttendance(updateAttendanceInput: UpdateAttendanceInput!): Attendance!
  findAttendanceUsers(campus: CampusEnum!, generation: Int!, date: String!): [Attendance!]!
  createGeneration(createGenerationInput: CreateGenerationInput!): Generation!
  updateGeneration(updateGenerationInput: UpdateGenerationInput!): Generation!
  createUser(createUserInput: CreateUserInput!): User!
  searchAllUsers(campus: CampusEnum!, generation: Int!, date: String): [User!]!
  updateUser(updateUserInput: UpdateUserInput!): User!
  login(email: String!, password: String!): Token!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AttendanceInput {
  enrollment: String!
}

input CreateAttendanceInput {
  userId: Int!
  date: String!
  delay: Boolean!
  justifiedDelay: Boolean!
  justifiedAbsence: Boolean!
  reason: ReasonEmun
  descripcion: String
}

input UpdateAttendanceInput {
  userId: Int
  date: String
  delay: Boolean
  justifiedDelay: Boolean
  justifiedAbsence: Boolean
  reason: ReasonEmun
  descripcion: String
  id: Int!
}

input CreateGenerationInput {
  generation: Int!
  inProgress: Boolean!
  campus: CampusEnum!
}

input UpdateGenerationInput {
  generation: Int
  inProgress: Boolean
  campus: CampusEnum
  id: Int!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  enrollment: String!
  phone: String
  generationId: Int!
  campus: CampusEnum!
  role: RoleUser!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  generationId: Int
  role: RoleUser
  id: Int!
}